"use client"

import { useState, useEffect } from "react";
// Formik, Yup, Field, ErrorMessage gibi Form bileÅŸeni baÄŸÄ±mlÄ±lÄ±klarÄ± CategoryForms.tsx'e taÅŸÄ±ndÄ±.
import { useReactTable, getCoreRowModel, getPaginationRowModel, ColumnDef, flexRender } from "@tanstack/react-table"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Category, NewCategory } from "@/app/models/Category";
import { toast, ToastContainer} from "react-toastify";
import { useSession, getSession } from 'next-auth/react';
import { MoreVerticalIcon, EditIcon, Trash2Icon,SearchIcon Â } from 'lucide-react';
import {
Â  DropdownMenu,
Â  DropdownMenuContent,
Â  DropdownMenuItem,
Â  DropdownMenuSeparator,
Â  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'; 

// ðŸŽ¯ TAÅžINAN YARDIMCI BÄ°LEÅžENLERÄ°N Ä°MPORTU
import { NewCategoryForm, FormikUpdateCategory, ConfirmDeleteDialog } from "./components/CategoryForms"; 


export default function CategoryPage() {
Â  Â  const { data: session, status } = useSession();
Â  Â  const [data, setData] = useState<Category[]>([]);
Â  Â  const [isOpen, setIsOpen] = useState(false);
Â  Â  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
Â  Â  const [isEditOpen, setIsEditOpen] = useState(false);
Â  Â  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
Â  Â  const [categoryToDelete, setCategoryToDelete] = useState<Category | null>(null);
Â  Â  const [searchText, setSearchText] = useState("");

Â  Â  // eslint-disable-next-line @typescript-eslint/no-unused-vars
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const baseURL = process.env.NEXT_PUBLIC_BASE_URL;

Â useEffect(() => {
Â  const fetchProducts = async () => {
Â  Â  if (session?.accessToken) {
Â  Â  Â  try {
Â  Â  Â  Â  // Backend'e search parametresi ekleniyor
Â  Â  Â  Â  const url = new URL(`${baseURL}/api/Category/GetAllCategories`);
Â  Â  Â  Â  if (searchText.trim() !== "") {
Â  Â  Â  Â  Â  url.searchParams.append("searchText", searchText.trim());
Â  Â  Â  Â  }

Â  Â  Â  Â  const response = await fetch(url.toString(), {
Â  Â  Â  Â  Â  method: "GET",
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${session.accessToken}`,
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  Â  throw new Error(
Â  Â  Â  Â  Â  Â  errorData.errorMessage ||
Â  Â  Â  Â  Â  Â  Â  errorData.message ||
Â  Â  Â  Â  Â  Â  Â  "Kategori listesi Ã§ekilemedi."
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  }
Â  Â  Â  Â  const productList: Category[] = await response.json();
Â  Â  Â  Â  setData(productList);
Â  Â  Â  // eslint-disable-next-line @typescript-eslint/no-explicit-any
Â  Â  Â  } catch (error: any) {
Â  Â  Â  Â  toast.error(error.message || "Kategori listesi yÃ¼klenirken hata oluÅŸtu");
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (status === "authenticated") {
Â  Â  fetchProducts();
Â  } else if (status === "unauthenticated") {
Â  Â  setLoading(false);
Â  }
}, [session, status, baseURL, searchText]);

Â  // TanStack Table iÃ§in sÃ¼tun tanÄ±mlarÄ±
Â  const columns: ColumnDef<Category>[] = [
Â  Â  { accessorKey: "id", header: "Id" },
Â  Â  { accessorKey: "name", header: "Kategori AdÄ±" },
Â  Â  { accessorKey: "description", header: "AÃ§Ä±klama" }, Â  
Â  Â  {
Â  Â  Â  id: "actions",
Â  Â  Â  header: "Ä°ÅŸlemler", 
Â  Â  Â  cell: ({ row }) => (
Â  Â  Â  Â  <DropdownMenu>
Â  Â  Â  Â  Â  <DropdownMenuTrigger asChild>
Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  variant="ghost"
Â  Â  Â  Â  Â  Â  Â  className="flex size-8 text-muted-foreground data-[state=open]:bg-muted"
Â  Â  Â  Â  Â  Â  Â  size="icon"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <MoreVerticalIcon className="h-4 w-4" /> 
Â  Â  Â  Â  Â  Â  Â  <span className="sr-only">MenÃ¼yÃ¼ aÃ§</span>
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </DropdownMenuTrigger>
Â  Â  Â  Â  Â  <DropdownMenuContent align="end" className="w-32">
Â  Â  Â  Â  Â  Â  <DropdownMenuItem onClick={() => handleEdit(row.original)}>
Â  Â  Â  Â  Â  Â  Â  <EditIcon className="mr-2 h-4 w-4" /> DÃ¼zenle
Â  Â  Â  Â  Â  Â  </DropdownMenuItem>
Â  Â  Â  Â  Â  Â  <DropdownMenuSeparator />
Â  Â  Â  Â  Â  Â  <DropdownMenuItem onClick={() => handleDeleteClick(row.original)}>
Â  Â  Â  Â  Â  Â  Â  Â  <Trash2Icon className="mr-2 h-4 w-4" /> Sil
Â  Â  Â  Â  Â  Â  </DropdownMenuItem>
Â  Â  Â  Â  Â  </DropdownMenuContent>
Â  Â  Â  Â  </DropdownMenu>
Â  Â  Â  )
Â  Â  }
Â  ]

Â  // TanStack Table hook'unun baÅŸlatÄ±lmasÄ±
Â  const table = useReactTable({
Â  Â  data: data,
Â  Â  columns,
Â  Â  getCoreRowModel: getCoreRowModel(),
Â  Â  getPaginationRowModel: getPaginationRowModel(),
Â  Â  initialState: {
Â  Â  Â  pagination: {
Â  Â  Â  Â  pageSize: 10
Â  Â  Â  }
Â  Â  }
Â  })

Â  // Yeni kategori ekleme iÅŸlemi
Â  async function handleAdd(category: NewCategory) {
Â  Â  try {
Â  Â  Â  Â  const currentSession = await getSession(); 
Â  Â  Â  Â  const response = await fetch(`${baseURL}/api/Category`, {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${currentSession?.accessToken}`,
Â  Â  Â  Â  },
Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  Â  name: category.name,
Â  Â  Â  Â  Â  Â  description: category.description,
Â  Â  Â  Â  }),
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  throw new Error(errorData.errorMessage || errorData.message || "Kategori eklenemedi");
Â  Â  Â  Â  }

Â  Â  Â  Â  const createdCategory: Category = await response.json();
Â  Â  Â  Â  setData(prev => [...prev, createdCategory]);
Â  Â  Â  Â  toast.success("Yeni kategori baÅŸarÄ±yla eklendi!");
Â  Â  Â  Â  setIsOpen(false);
Â  Â  // eslint-disable-next-line @typescript-eslint/no-explicit-any
Â  Â  } catch (err: any) {
Â  Â  Â  Â  toast.error(err.message || "Kategori eklenirken bir hata oluÅŸtu");
Â  Â  }
Â  }

Â  async function handleEdit(category: Category) {
Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch(`${baseURL}/api/Category/${category.id}`, {
Â  Â  Â  Â  Â  Â  method: "GET",
Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${session?.accessToken}`,
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  throw new Error("Kategori bilgileri alÄ±namadÄ±");
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  Â  Â  setSelectedCategory(data);
Â  Â  Â  Â  Â  Â  setIsEditOpen(true);
Â  Â  Â  Â  // eslint-disable-next-line @typescript-eslint/no-explicit-any
Â  Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  Â  Â  toast.error(err.message || "DÃ¼zenleme iÃ§in kategori alÄ±namadÄ±");
Â  Â  Â  Â  }
Â  Â  }

Â  function handleDeleteClick(category: Category) {
Â  Â  setCategoryToDelete(category);
Â  Â  setDeleteConfirmOpen(true);
Â  }

async function handleDeleteConfirm() {

Â  if (!categoryToDelete) return;

Â  try {
Â  Â  const currentSession = await getSession(); 
Â  Â  const response = await fetch(`${baseURL}/api/Category/${categoryToDelete.id}`, {
Â  Â  Â  method: "DELETE",
Â  Â  Â  headers: {
Â  Â  Â  Â  Authorization: `Bearer ${currentSession?.accessToken}`,
Â  Â  Â  },
Â  Â  });

Â  Â  if (!response.ok) {
Â  Â  Â  const errorData = await response.json();
Â  Â  Â  throw new Error(errorData.errorMessage || "Kategori silinemedi");
Â  Â  }

Â  Â  setData(prev => prev.filter(c => c.id !== categoryToDelete.id));
Â  Â  toast.success("Kategori baÅŸarÄ±yla silindi!");
Â  // eslint-disable-next-line @typescript-eslint/no-explicit-any
Â  } catch (err: any) {
Â  Â  toast.error(err.message || "Kategori silinirken hata oluÅŸtu");
Â  } finally {
Â  Â  setDeleteConfirmOpen(false);
Â  Â  setCategoryToDelete(null);
Â  }
}

Â  return (
Â  Â  <div className="p-4 space-y-4">
Â  Â  Â  <div className="flex justify-between items-center">
Â  Â  Â  Â  <h1 className="font-bold text-3xl">Kategoriler</h1>
Â  Â  Â  Â  <div className="flex justify-center w-full">
Â  Â  Â  Â  Â  Â  <div className="relative w-2/3">
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Ara..."
Â  Â  Â  Â  Â  Â  Â  Â  value={searchText}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchText(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-3xl pl-10 pr-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#e5e7eb]"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <Dialog open={isOpen} onOpenChange={setIsOpen}>
Â  Â  Â  Â  Â  <DialogTrigger asChild>
Â  Â  Â  Â  Â  Â  <Button>Yeni Kategori Ekle</Button>
Â  Â  Â  Â  Â  </DialogTrigger>
Â  Â  Â  Â  Â  <DialogContent>
Â  Â  Â  Â  Â  Â  <DialogTitle>Yeni Kategori</DialogTitle>
Â  Â  Â  Â  Â  Â  <NewCategoryForm onSubmit={handleAdd} />
Â  Â  Â  Â  Â  </DialogContent>
Â  Â  Â  Â  </Dialog>
Â  Â  Â  </div>

Â  Â  Â  <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>
Â  Â  Â  Â  <DialogContent>
Â  Â  Â  Â  Â  Â  <DialogTitle>Kategoriyi DÃ¼zenle</DialogTitle>
Â  Â  Â  Â  Â  Â  <FormikUpdateCategory
Â  Â  Â  Â  Â  Â  Â  Â  category={selectedCategory}
Â  Â  Â  Â  Â  Â  Â  Â  onClose={() => setIsEditOpen(false)}
Â  Â  Â  Â  Â  Â  Â  Â  onUpdated={(updatedCategory) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // local state'i gÃ¼ncelle
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setData((prev) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  prev.map((c) => (c.id === updatedCategory.id ? updatedCategory : c))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </DialogContent>
Â  Â  Â  </Dialog>

Â  Â  Â  <ConfirmDeleteDialog
Â  Â  Â  Â  isOpen={deleteConfirmOpen}
Â  Â  Â  Â  onClose={() => setDeleteConfirmOpen(false)}
Â  Â  Â  Â  onConfirm={handleDeleteConfirm}
Â  Â  Â  Â  categoryName={categoryToDelete?.name || ""}
Â  Â  Â  />

Â  Â  Â  <div className="rounded-md border overflow-x-auto">
Â  Â  Â  Â  <Table> Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  Â  <TableHeader>
Â  Â  Â  Â  Â  Â  {table.getHeaderGroups().map(headerGroup => (
Â  Â  Â  Â  Â  Â  Â  <TableRow key={headerGroup.id}>
Â  Â  Â  Â  Â  Â  Â  Â  {headerGroup.headers.map(header => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableHead key={header.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {header.column.columnDef.header as string}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableHead>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </TableHeader>
Â  Â  Â  Â  Â  <TableBody>
Â  Â  Â  Â  Â  Â  {table.getRowModel().rows.length ? (
Â  Â  Â  Â  Â  Â  Â  Â  table.getRowModel().rows.map(row => (
Â  Â  Â  Â  Â  Â  Â  Â  <TableRow key={row.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {row.getVisibleCells().map(cell => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell key={cell.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {flexRender(cell.column.columnDef.cell, cell.getContext())}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  <TableCell colSpan={columns.length} className="h-24 text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  GÃ¶sterilecek kategori bulunamadÄ±.
Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </TableBody>
Â  Â  Â  Â  </Table>
Â  Â  Â  </div>

Â  Â  Â  <div className="flex justify-end items-center gap-2">
Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  onClick={() => table.previousPage()}
Â  Â  Â  Â  Â  disabled={!table.getCanPreviousPage()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Ã–nceki
Â  Â  Â  Â  </Button>
Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  onClick={() => table.nextPage()}
Â  Â  Â  Â  Â  disabled={!table.getCanNextPage()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Sonraki
Â  Â  Â  Â  </Button>
Â  Â  Â  </div> Â  Â  Â 
Â  Â  Â  <ToastContainer />
Â  Â  </div>
Â  ) Â 
}